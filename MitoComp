#!/bin/bash

set -e

usage() {
        echo "Welcome to MitoComp. Your are using Git commit: $commit"
        echo
        echo "Usage: $0 [-m <runmode>] [-t <submission_system>] [-c <config_file>] [-s \"<snakemke_args>\"]"
        echo
        echo "Options:"
        echo "  -m <runmode> Determine how far the pipeline should run. Options: assembly, gather, annotate, all. Default: all"
        echo "  -c <config_file> Path to config file in YAML format (default: data/config.yaml). "
        echo "  -t <submission_system> Specify available submission system. Options: sge, slurm, torque, local (no submission system)."
        echo "  --clusterconfig=<cluster_config_file> Path to cluster config file in YAML format (if submission system is non-local). "
	echo "  --threads=<int>. Number of threads (when run without submission, i.e. local - default: all available)"
        echo "  -s \"<snakemake_args>\" Additional arguments passed on to the snakemake command (optional)."
        echo "  -i \"<singularity_args>\" Additional arguments passed on to singularity (optional)."
        echo
        echo "  --dry Invokes a dry-run. Corresponds to: snakemake -n"
        echo "  --reset. Use this option to cancel all remaining jobs from this snakemake command without cancelling other cluster jobs. This is useful if any jobs fail to produce the desired output."
        #echo "  --report This creates an overview report of the run."
        #echo "  --setup Will download the genomes and prepare the pipeline to run."
        #echo "  --remove Resets the pipeline. Will delete all results, logs and checkpoints."
        echo
        1>&2; exit 1; }

version() {
        echo "$0 Git commit: $commit"
        exit 0
}
CLUSTER="local"
CONFIG="data/config.yaml"
CLUSTER_CONFIG=""
SETUP=""
REPORT=""
DRY=""
RESET="FALSE"
RUNMODE="all"
NJOBS="100042"

commit=$(git rev-parse --short HEAD)
STDSMARGS="--notemp --latency-wait 60"

while getopts ":vt:c:s:m:i:-:" option;
        do
                case "${option}"
                in
                        v) version;;
                        m) RUNMODE=${OPTARG};;
                        t) CLUSTER=${OPTARG};;
                        c) CONFIG=${OPTARG};;
                        s) SM_ARGS=${OPTARG};;
                        i) SI_ARGS=${OPTARG};;
                        -) LONG_OPTARG="${OPTARG#*}"
                                case $OPTARG in
                        		clusterconfig=*) CLUSTER_CONFIG=${OPTARG#*=};;
					threads=*) NJOBS=${OPTARG#*=};;
                                        dry) DRY="-n" ;;
                                        reset) RESET="TRUE" ;;
                                        '' ) break ;;
                                        *) echo "Illegal option --$OPTARG" >&2; usage; exit 2 ;;
                                esac ;; 
                        *) echo "Illegal option --$OPTARG" >&2; usage;;
                        ?) echo "Illegal option --$OPTARG" >&2 usage;;
                esac
        done
export $RUNMODE

#SM_ARGS="--quiet"
if [ $OPTIND -eq 1 ]; then usage; fi

# make sure these directories exist before submission because they are needed as singularity bind points
if [[ ! -d .usr_tmp ]]; then mkdir .usr_tmp; fi 
if [[ $RESET == "TRUE" ]]; then
        set +e
        if [[ $CLUSTER == "slurm" ]]; then
                grep -o -P 'batch job\K.[0-9]{1,8}' log/submission.txt > log/sub_ids.txt
                cat log/sub_ids.txt | while read line; do scancel $line; done
        elif [[ $CLUSTER == "sge" ]]; then
                grep "^Submitted job" log/submission.txt | awk '{print $9}' > log/sub_ids.txt
                for jobid in $(cat log/sub_ids.txt); do qdel $jobid; done
        elif [[ $CLUSTER == "torque" ]]; then
                grep "^Submitted job" log/submission.txt | awk '{print $9}' > log/sub_ids.txt
                for jobid in $(cat log/sub_ids.txt); do qdel $jobid; done
        else
                echo "reset not valid for local runmode"
        fi
exit 0
fi
export RUNMODE
if [[ $RUNMODE == "assembly" ]]; then
        ## if --dry is specified it will be executed as for mode local but with the dry flag - immediate-submit doesn't always show the full snakemake output in a dryrun
        if [ ! -z $DRY ]; then
                echo -e "dryrun"
                snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY assembly_only
                exit 0
	fi

        if [[ ! -d output/gathered_assemblies/ ]]; then mkdir -p output/gathered_assemblies/; fi
        if [[ $CLUSTER == "slurm" ]]; then
                  snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS assembly_only 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "sge" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG -cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS assembly_only 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "torque" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS assembly_only 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "local" ]]; then
            snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY assembly_only
          else
                  echo "Submission system not recognized"
                  exit 1
          fi
elif [[ $RUNMODE == "gather" ]]; then
        snakemake  --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs 1 --configfile $CONFIG --force $SM_ARGS $DRY gather
elif [[ $RUNMODE == "annotate" ]]; then
        ## if --dry is specified it will be executed as for mode local but with the dry flag
        if [ ! -z $DRY ]; then
                echo -e "dryrun"
                snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG $(if [[ ! -z $CLUSTER_CONFIG ]]; then echo "--cluster-config $CLUSTER_CONFIG"; fi) --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY
                exit 0
	fi

        if [[ $CLUSTER == "slurm" ]]; then
                  snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "sge" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "torque" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "local" ]]; then
            snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS
          else
                  echo "Submission system not recognized"
                  exit 1
          fi
elif [[ $RUNMODE == "all" ]]; then
        if [[ ! -d output/gathered_assemblies/ ]]; then mkdir -p output/gathered_assemblies/; fi
        ## if --dry is specified it will be executed as for mode local but with the dry flag
        if [ ! -z $DRY ]; then
                echo -e "dryrun"
                snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS $DRY
                exit 0
	fi

        ## the real run
        if [[ $CLUSTER == "slurm" ]]; then
                  snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "sge" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' sge" --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "torque" ]]; then
                snakemake --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --configfile $CONFIG --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit/immediate_submit.py '{dependencies}' torque" --immediate-submit $STDSMARGS $SM_ARGS 2>&1 | tee log/submission.txt
          elif [[ $CLUSTER == "local" ]]; then
                snakemake --use-singularity --jobs $NJOBS --configfile $CONFIG --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" $STDSMARGS $SM_ARGS 
          else
                  echo "Submission system not recognized"
                  exit 1
          fi
else
        echo "Runmode not recognized: "$RUNMODE
        exit 1
fi
